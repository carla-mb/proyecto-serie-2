{"mappings":"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","sources":["<anon>","src/scripts/lite-yt-embed.js"],"sourcesContent":["/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */ class LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute(\"videoid\");\n        let playBtnEl = this.querySelector(\".lty-playbtn\");\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = playBtnEl && playBtnEl.textContent.trim() || this.getAttribute(\"playlabel\") || \"Play\";\n        /**\r\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         *\r\n         * TODO: Do the sddefault->hqdefault fallback\r\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\r\n         * TODO: Consider using webp if supported, falling back to jpg\r\n         */ if (!this.style.backgroundImage) this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement(\"button\");\n            playBtnEl.type = \"button\";\n            playBtnEl.classList.add(\"lty-playbtn\");\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement(\"span\");\n            playBtnLabelEl.className = \"lyt-visually-hidden\";\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n        playBtnEl.removeAttribute(\"href\");\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener(\"pointerover\", LiteYTEmbed.warmConnections, {\n            once: true\n        });\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener(\"click\", this.addIframe);\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n        this.needsYTApiForAutoplay = navigator.vendor.includes(\"Apple\") || navigator.userAgent.includes(\"Mobi\");\n    }\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */ static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement(\"link\");\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) linkEl.as = as;\n        document.head.append(linkEl);\n    }\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */ static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.youtube-nocookie.com\");\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.google.com\");\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://googleads.g.doubleclick.net\");\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://static.doubleclick.net\");\n        LiteYTEmbed.preconnected = true;\n    }\n    fetchYTPlayerApi() {\n        if (window.YT || window.YT && window.YT.Player) return;\n        this.ytApiPromise = new Promise((res, rej)=>{\n            var el = document.createElement(\"script\");\n            el.src = \"https://www.youtube.com/iframe_api\";\n            el.async = true;\n            el.onload = (_)=>{\n                YT.ready(res);\n            };\n            el.onerror = rej;\n            this.append(el);\n        });\n    }\n    async addYTPlayerIframe(params) {\n        this.fetchYTPlayerApi();\n        await this.ytApiPromise;\n        const videoPlaceholderEl = document.createElement(\"div\");\n        this.append(videoPlaceholderEl);\n        const paramsObj = Object.fromEntries(params.entries());\n        new YT.Player(videoPlaceholderEl, {\n            width: \"100%\",\n            videoId: this.videoId,\n            playerVars: paramsObj,\n            events: {\n                \"onReady\": (event)=>{\n                    event.target.playVideo();\n                }\n            }\n        });\n    }\n    async addIframe() {\n        if (this.classList.contains(\"lyt-activated\")) return;\n        this.classList.add(\"lyt-activated\");\n        const params = new URLSearchParams(this.getAttribute(\"params\") || []);\n        params.append(\"autoplay\", \"1\");\n        params.append(\"playsinline\", \"1\");\n        if (this.needsYTApiForAutoplay) return this.addYTPlayerIframe(params);\n        const iframeEl = document.createElement(\"iframe\");\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\";\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\n        this.append(iframeEl);\n        // Set focus for a11y\n        iframeEl.focus();\n    }\n}\n// Register custom element\ncustomElements.define(\"lite-youtube\", LiteYTEmbed);\n\n//# sourceMappingURL=index.814cd5cc.js.map\n","/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */\r\nclass LiteYTEmbed extends HTMLElement {\r\n    connectedCallback() {\r\n        this.videoId = this.getAttribute('videoid');\r\n\r\n        let playBtnEl = this.querySelector('.lty-playbtn');\r\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\r\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\r\n\r\n        /**\r\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         *\r\n         * TODO: Do the sddefault->hqdefault fallback\r\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\r\n         * TODO: Consider using webp if supported, falling back to jpg\r\n         */\r\n        if (!this.style.backgroundImage) {\r\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\r\n        }\r\n\r\n        // Set up play button, and its visually hidden label\r\n        if (!playBtnEl) {\r\n            playBtnEl = document.createElement('button');\r\n            playBtnEl.type = 'button';\r\n            playBtnEl.classList.add('lty-playbtn');\r\n            this.append(playBtnEl);\r\n        }\r\n        if (!playBtnEl.textContent) {\r\n            const playBtnLabelEl = document.createElement('span');\r\n            playBtnLabelEl.className = 'lyt-visually-hidden';\r\n            playBtnLabelEl.textContent = this.playLabel;\r\n            playBtnEl.append(playBtnLabelEl);\r\n        }\r\n        playBtnEl.removeAttribute('href');\r\n\r\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\r\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\r\n\r\n        // Once the user clicks, add the real iframe and drop our play button\r\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\r\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\r\n        this.addEventListener('click', this.addIframe);\r\n\r\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\r\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\r\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\r\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\r\n        this.needsYTApiForAutoplay = navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\r\n    }\r\n\r\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */\r\n    static addPrefetch(kind, url, as) {\r\n        const linkEl = document.createElement('link');\r\n        linkEl.rel = kind;\r\n        linkEl.href = url;\r\n        if (as) {\r\n            linkEl.as = as;\r\n        }\r\n        document.head.append(linkEl);\r\n    }\r\n\r\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */\r\n    static warmConnections() {\r\n        if (LiteYTEmbed.preconnected) return;\r\n\r\n        // The iframe document and most of its subresources come right off youtube.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\r\n        // The botguard script is fetched off from google.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\r\n\r\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\r\n\r\n        LiteYTEmbed.preconnected = true;\r\n    }\r\n\r\n    fetchYTPlayerApi() {\r\n        if (window.YT || (window.YT && window.YT.Player)) return;\r\n\r\n        this.ytApiPromise = new Promise((res, rej) => {\r\n            var el = document.createElement('script');\r\n            el.src = 'https://www.youtube.com/iframe_api';\r\n            el.async = true;\r\n            el.onload = _ => {\r\n                YT.ready(res);\r\n            };\r\n            el.onerror = rej;\r\n            this.append(el);\r\n        });\r\n    }\r\n\r\n    async addYTPlayerIframe(params) {\r\n        this.fetchYTPlayerApi();\r\n        await this.ytApiPromise;\r\n\r\n        const videoPlaceholderEl = document.createElement('div')\r\n        this.append(videoPlaceholderEl);\r\n\r\n        const paramsObj = Object.fromEntries(params.entries());\r\n\r\n        new YT.Player(videoPlaceholderEl, {\r\n            width: '100%',\r\n            videoId: this.videoId,\r\n            playerVars: paramsObj,\r\n            events: {\r\n                'onReady': event => {\r\n                    event.target.playVideo();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    async addIframe(){\r\n        if (this.classList.contains('lyt-activated')) return;\r\n        this.classList.add('lyt-activated');\r\n\r\n        const params = new URLSearchParams(this.getAttribute('params') || []);\r\n        params.append('autoplay', '1');\r\n        params.append('playsinline', '1');\r\n\r\n        if (this.needsYTApiForAutoplay) {\r\n            return this.addYTPlayerIframe(params);\r\n        }\r\n\r\n        const iframeEl = document.createElement('iframe');\r\n        iframeEl.width = 560;\r\n        iframeEl.height = 315;\r\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\r\n        iframeEl.title = this.playLabel;\r\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\r\n        iframeEl.allowFullscreen = true;\r\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\r\n        // https://stackoverflow.com/q/64959723/89484\r\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\r\n        this.append(iframeEl);\r\n\r\n        // Set focus for a11y\r\n        iframeEl.focus();\r\n    }\r\n}\r\n// Register custom element\r\ncustomElements.define('lite-youtube', LiteYTEmbed);"],"names":["LiteYTEmbed","HTMLElement","connectedCallback","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","style","backgroundImage","document","createElement","type","classList","add","append","playBtnLabelEl","className","removeAttribute","addEventListener","warmConnections","once","addIframe","needsYTApiForAutoplay","navigator","vendor","includes","userAgent","addPrefetch","kind","url","as","linkEl","rel","href","head","preconnected","fetchYTPlayerApi","window","YT","Player","ytApiPromise","Promise","res","rej","el","src","async","onload","_","ready","onerror","addYTPlayerIframe","params","videoPlaceholderEl","paramsObj","Object","fromEntries","entries","width","playerVars","events","event","target","playVideo","contains","URLSearchParams","iframeEl","height","title","allow","allowFullscreen","encodeURIComponent","toString","focus","customElements","define"],"version":3,"file":"index.814cd5cc.js.map"}